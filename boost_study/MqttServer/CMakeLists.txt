cmake_minimum_required(VERSION 3.28)
project(MqttServer)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)


if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g")
endif ()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "Build type: Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "Build type: Release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    message(STATUS "Build type: RelWithDebInfo")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    message(STATUS "Build type: MinSizeRel")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os")
else()
    message(STATUS "Build type: Default to Release with debug information")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -g")
endif()

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/output/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/output/lib)
find_package(Boost 1.85.0 REQUIRED COMPONENTS stacktrace_addr2line)
find_package(yaml-cpp REQUIRED)
add_subdirectory(third-party/spdlog)
add_subdirectory(third-party/jsoncpp)
add_subdirectory(third-party/cpp_properties)
include(FetchContent)


file(GLOB_RECURSE srcs ${PROJECT_SOURCE_DIR}/src/*.cpp)
file(GLOB_RECURSE hrds ${PROJECT_SOURCE_DIR}/src/*.h)

include_directories(third-party/jsoncpp/include)
include_directories(third-party/spdlog/include)
include_directories(third-party/cpp_properties/src/include)
include_directories(src)
set(OPENSSL_ROOT_DIR "/usr/local/openssl")
add_executable(MqttServer main.cpp ${srcs})
target_link_libraries(${PROJECT_NAME} PUBLIC  spdlog::spdlog yaml-cpp::yaml-cpp)

# if(MQ_WITH_TLS)
#     find_package(OpenSSL REQUIRED)
#     add_definitions(-DMQ_WITH_TLS)
#     target_link_libraries(${PROJECT_NAME} PUBLIC OpenSSL::SSL)
# endif ()
add_definitions(-DMQ_WITH_TLS)
target_link_directories(${PROJECT_NAME} PUBLIC /usr/lib/x86_64-linux-gnu)
target_link_libraries(${PROJECT_NAME} PUBLIC ssl crypto)
target_link_libraries(${PROJECT_NAME} PUBLIC ${Boost_LIBRARIES})
